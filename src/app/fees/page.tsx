'use client';

import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Sidebar } from '@/components/Sidebar';
import { Header } from '@/components/Header';
import { Search, SortAsc, SortDesc, Info, LineChart, BarChart, PieChart } from 'lucide-react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { motion, AnimatePresence } from "framer-motion";
import Image from 'next/image';
import { FeeDistributionChart } from '@/components/charts/FeeDistributionChart';
import { FeeTrendsChart } from '@/components/charts/FeeTrendsChart';
import { TopProtocolsChart } from '@/components/charts/TopProtocolsChart';

// Define protocol fee data type
interface ProtocolFee {
  id: string;
  name: string;
  logo: string;
  category: string;
  dailyFees: number;
  weeklyFees: number;
  monthlyFees: number;
  totalFees: number;
  dailyRevenue: number;
  weeklyRevenue: number;
  monthlyRevenue: number;
  totalRevenue: number;
  chains: string[];
}

type SortOption = 'dailyFees' | 'weeklyFees' | 'monthlyFees' | 'totalFees' | 'name' | 'category';
type SortDirection = 'asc' | 'desc';
type TimeFrame = 'daily' | 'weekly' | 'monthly' | 'cumulative';

const SORT_DESCRIPTIONS = {
  dailyFees: "Daily fees generated by the protocol",
  weeklyFees: "Weekly fees generated by the protocol",
  monthlyFees: "Monthly fees generated by the protocol",
  totalFees: "Total fees generated by the protocol",
  name: "Protocol name",
  category: "Protocol category"
};

// Mock data for protocol fees
const MOCK_PROTOCOL_FEES: ProtocolFee[] = [
  {
    id: 'aave',
    name: 'AAVE',
    logo: 'https://defillama.com/icons/aave.jpg',
    category: 'Lending',
    dailyFees: 782000,
    weeklyFees: 5476000,
    monthlyFees: 21904000,
    totalFees: 154328000,
    dailyRevenue: 312800,
    weeklyRevenue: 2190400,
    monthlyRevenue: 8761600,
    totalRevenue: 61731200,
    chains: ['Ethereum', 'Arbitrum', 'Optimism', 'Polygon', 'Avalanche', 'Harmony', 'Metis', 'Base', 'Scroll', 'Sonic']
  },
  {
    id: 'uniswap',
    name: 'Uniswap',
    logo: 'https://defillama.com/icons/uniswap.jpg',
    category: 'DEX',
    dailyFees: 1250000,
    weeklyFees: 8750000,
    monthlyFees: 35000000,
    totalFees: 245000000,
    dailyRevenue: 250000,
    weeklyRevenue: 1750000,
    monthlyRevenue: 7000000,
    totalRevenue: 49000000,
    chains: ['Ethereum', 'Arbitrum', 'Optimism', 'Polygon', 'Avalanche', 'Base']
  },
  {
    id: 'gmx',
    name: 'GMX',
    logo: 'https://defillama.com/icons/gmx.jpg',
    category: 'Derivatives',
    dailyFees: 892000,
    weeklyFees: 6244000,
    monthlyFees: 24976000,
    totalFees: 174832000,
    dailyRevenue: 357000,
    weeklyRevenue: 2498000,
    monthlyRevenue: 9990000,
    totalRevenue: 69933000,
    chains: ['Arbitrum', 'Avalanche']
  },
  {
    id: 'lido',
    name: 'Lido',
    logo: 'https://defillama.com/icons/lido.jpg',
    category: 'Liquid Staking',
    dailyFees: 1475000,
    weeklyFees: 10325000,
    monthlyFees: 41300000,
    totalFees: 289100000,
    dailyRevenue: 147500,
    weeklyRevenue: 1032500,
    monthlyRevenue: 4130000,
    totalRevenue: 28910000,
    chains: ['Ethereum', 'Solana', 'Polygon']
  },
  {
    id: 'curve',
    name: 'Curve',
    logo: 'https://defillama.com/icons/curve.jpg',
    category: 'DEX',
    dailyFees: 620000,
    weeklyFees: 4340000,
    monthlyFees: 17360000,
    totalFees: 121520000,
    dailyRevenue: 186000,
    weeklyRevenue: 1302000,
    monthlyRevenue: 5208000,
    totalRevenue: 36456000,
    chains: ['Ethereum', 'Arbitrum', 'Optimism', 'Polygon', 'Avalanche', 'Base', 'Fantom']
  },
  {
    id: 'convex',
    name: 'Convex Finance',
    logo: 'https://defillama.com/icons/convex.jpg',
    category: 'Yield',
    dailyFees: 21500,
    weeklyFees: 150500,
    monthlyFees: 602000,
    totalFees: 4214000,
    dailyRevenue: 8400,
    weeklyRevenue: 58800,
    monthlyRevenue: 235200,
    totalRevenue: 1646400,
    chains: ['Ethereum', 'Arbitrum', 'Base', 'Polygon']
  },
  {
    id: 'ondo',
    name: 'Ondo Finance',
    logo: 'https://defillama.com/icons/ondo.jpg',
    category: 'RWA',
    dailyFees: 15200,
    weeklyFees: 106400,
    monthlyFees: 425600,
    totalFees: 2979200,
    dailyRevenue: 7600,
    weeklyRevenue: 53200,
    monthlyRevenue: 212800,
    totalRevenue: 1489600,
    chains: ['Ethereum', 'Arbitrum', 'Base', 'Optimism', 'Polygon', 'Avalanche', 'Fantom', 'BSC']
  },
  {
    id: 'rocket',
    name: 'Rocket Pool',
    logo: 'https://defillama.com/icons/rocketpool.jpg',
    category: 'Liquid Staking',
    dailyFees: 135000,
    weeklyFees: 945000,
    monthlyFees: 3780000,
    totalFees: 26460000,
    dailyRevenue: 94500,
    weeklyRevenue: 661500,
    monthlyRevenue: 2646000,
    totalRevenue: 18522000,
    chains: ['Ethereum']
  },
];

// Chain filter options
const CHAIN_OPTIONS = [
  'All Chains',
  'Ethereum',
  'Arbitrum',
  'Optimism',
  'Polygon',
  'Avalanche',
  'Base',
  'Fantom',
  'BSC',
  'Solana',
  'Harmony',
  'Metis',
  'Scroll',
  'Sonic'
];

// Category filter options
const CATEGORY_OPTIONS = [
  'All Categories',
  'Lending',
  'DEX',
  'Derivatives',
  'Liquid Staking',
  'Yield',
  'RWA'
];

// Add this function at the top level
const getImageUrl = (logo: string) => {
  // If it's already a full URL, return it
  if (logo.startsWith('http')) {
    return logo;
  }
  // If it's a relative path, make it absolute
  return `${process.env.NEXT_PUBLIC_BASE_URL || ''}${logo}`;
};

// Add this component
function ProtocolLogo({ src, alt, className = "" }: { src: string; alt: string; className?: string }) {
  const [error, setError] = useState(false);
  
  if (error) {
    return (
      <div className={`bg-zinc-800 rounded-full flex items-center justify-center ${className}`}>
        <span className="text-zinc-400 text-xs">{alt.slice(0, 2)}</span>
      </div>
    );
  }

  return (
    <Image
      src={getImageUrl(src)}
      alt={alt}
      width={24}
      height={24}
      className={`rounded-full ${className}`}
      onError={() => setError(true)}
    />
  );
}

// Add this before the FeesPage component
const generateTrendData = (protocols: ProtocolFee[]) => {
  const dates = ['2024-03-01', '2024-03-02', '2024-03-03', '2024-03-04', '2024-03-05', '2024-03-06', '2024-03-07'];
  return dates.map(date => ({
    date,
    fees: protocols.reduce((sum, p) => sum + p.dailyFees * (0.8 + Math.random() * 0.4), 0),
    revenue: protocols.reduce((sum, p) => sum + p.dailyRevenue * (0.8 + Math.random() * 0.4), 0),
  }));
};

const generateDistributionData = (protocols: ProtocolFee[]) => {
  const categoryTotals = protocols.reduce((acc, protocol) => {
    acc[protocol.category] = (acc[protocol.category] || 0) + protocol.dailyFees;
    return acc;
  }, {} as Record<string, number>);

  const colors = {
    'Lending': '#3B82F6',
    'DEX': '#10B981',
    'Derivatives': '#6366F1',
    'Liquid Staking': '#8B5CF6',
    'Yield': '#EC4899',
    'RWA': '#F59E0B'
  };

  return Object.entries(categoryTotals).map(([name, value]) => ({
    name,
    value,
    color: colors[name as keyof typeof colors] || '#6B7280'
  }));
};

const generateTopProtocolsData = (protocols: ProtocolFee[]) => {
  return protocols
    .slice(0, 5)
    .map(p => ({
      name: p.name,
      fees: p.dailyFees,
      revenue: p.dailyRevenue
    }));
};

export default function FeesPage() {
  const [protocols, setProtocols] = useState<ProtocolFee[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<SortOption>('dailyFees');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [timeFrame, setTimeFrame] = useState<TimeFrame>('daily');
  const [selectedChain, setSelectedChain] = useState('All Chains');
  const [selectedCategory, setSelectedCategory] = useState('All Categories');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate loading data
    const fetchData = async () => {
      setIsLoading(true);
      // Simulate network request
      await new Promise(resolve => setTimeout(resolve, 1000));
      setProtocols(MOCK_PROTOCOL_FEES);
      setIsLoading(false);
    };
    fetchData();
  }, []);

  const formatValue = (value: number) => {
    if (value >= 1e9) return `$${(value / 1e9).toFixed(2)}B`;
    if (value >= 1e6) return `$${(value / 1e6).toFixed(2)}M`;
    if (value >= 1e3) return `$${(value / 1e3).toFixed(2)}K`;
    return `$${value.toFixed(2)}`;
  };

  // Get fee value based on timeframe
  const getFeeValue = (protocol: ProtocolFee, timeFrame: TimeFrame) => {
    switch (timeFrame) {
      case 'daily':
        return protocol.dailyFees;
      case 'weekly':
        return protocol.weeklyFees;
      case 'monthly':
        return protocol.monthlyFees;
      case 'cumulative':
        return protocol.totalFees;
      default:
        return protocol.dailyFees;
    }
  };

  // Get revenue value based on timeframe
  const getRevenueValue = (protocol: ProtocolFee, timeFrame: TimeFrame) => {
    switch (timeFrame) {
      case 'daily':
        return protocol.dailyRevenue;
      case 'weekly':
        return protocol.weeklyRevenue;
      case 'monthly':
        return protocol.monthlyRevenue;
      case 'cumulative':
        return protocol.totalRevenue;
      default:
        return protocol.dailyRevenue;
    }
  };

  // Filter and sort protocols
  const filteredProtocols = protocols
    .filter(protocol => {
      const searchLower = searchQuery.toLowerCase();
      const matchesSearch = protocol.name.toLowerCase().includes(searchLower) ||
                           protocol.category.toLowerCase().includes(searchLower);
      
      const matchesChain = selectedChain === 'All Chains' || 
                         protocol.chains.includes(selectedChain);
                         
      const matchesCategory = selectedCategory === 'All Categories' || 
                             protocol.category === selectedCategory;
                             
      return matchesSearch && matchesChain && matchesCategory;
    })
    .sort((a, b) => {
      let comparison = 0;
      switch (sortBy) {
        case 'name':
          comparison = a.name.localeCompare(b.name);
          break;
        case 'category':
          comparison = a.category.localeCompare(b.category);
          break;
        case 'dailyFees':
          comparison = b.dailyFees - a.dailyFees;
          break;
        case 'weeklyFees':
          comparison = b.weeklyFees - a.weeklyFees;
          break;
        case 'monthlyFees':
          comparison = b.monthlyFees - a.monthlyFees;
          break;
        case 'totalFees':
          comparison = b.totalFees - a.totalFees;
          break;
        default:
          comparison = b.dailyFees - a.dailyFees;
      }
      return sortDirection === 'desc' ? comparison : -comparison;
    });

  // Calculate totals for the current filtered set
  const totalFees = filteredProtocols.reduce((sum, protocol) => sum + getFeeValue(protocol, timeFrame), 0);
  const totalRevenue = filteredProtocols.reduce((sum, protocol) => sum + getRevenueValue(protocol, timeFrame), 0);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="flex h-screen">
      <Sidebar />
      <main className="flex-1 overflow-y-auto">
        <Header />
        <div className="container mx-auto px-4 py-8 space-y-6">
          <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <h1 className="text-3xl font-bold">Protocol Fees & Revenue</h1>
            <div className="flex flex-col md:flex-row gap-4 items-start md:items-center">
              <div className="relative w-full md:w-64">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Search protocols..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg font-medium">Total Protocol Fees</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">{formatValue(totalFees)}</div>
                <p className="text-zinc-500 dark:text-zinc-400 mt-1 text-sm">
                  {timeFrame.charAt(0).toUpperCase() + timeFrame.slice(1)} fees from {filteredProtocols.length} protocols
                </p>
              </CardContent>
            </Card>
            
            <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg font-medium">Total Protocol Revenue</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">{formatValue(totalRevenue)}</div>
                <p className="text-zinc-500 dark:text-zinc-400 mt-1 text-sm">
                  {timeFrame.charAt(0).toUpperCase() + timeFrame.slice(1)} revenue from {filteredProtocols.length} protocols
                </p>
              </CardContent>
            </Card>
            
            <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg font-medium">Protocol Fee Ratio</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold">{(totalRevenue / totalFees * 100).toFixed(2)}%</div>
                <p className="text-zinc-500 dark:text-zinc-400 mt-1 text-sm">
                  Percentage of fees distributed as revenue
                </p>
              </CardContent>
            </Card>
          </div>

          <div className="flex flex-col md:flex-row gap-6">
            <div className="md:w-1/4 space-y-4">
              <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium">Filters</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="text-sm font-medium block mb-2">Time Frame</label>
                    <Tabs 
                      value={timeFrame} 
                      onValueChange={(value) => setTimeFrame(value as TimeFrame)}
                      className="w-full"
                    >
                      <TabsList className="w-full">
                        <TabsTrigger value="daily" className="flex-1">Daily</TabsTrigger>
                        <TabsTrigger value="weekly" className="flex-1">Weekly</TabsTrigger>
                        <TabsTrigger value="monthly" className="flex-1">Monthly</TabsTrigger>
                        <TabsTrigger value="cumulative" className="flex-1">Total</TabsTrigger>
                      </TabsList>
                    </Tabs>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium block mb-2">Chain</label>
                    <Select value={selectedChain} onValueChange={setSelectedChain}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select chain" />
                      </SelectTrigger>
                      <SelectContent>
                        {CHAIN_OPTIONS.map(chain => (
                          <SelectItem key={chain} value={chain}>{chain}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium block mb-2">Category</label>
                    <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {CATEGORY_OPTIONS.map(category => (
                          <SelectItem key={category} value={category}>{category}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium block mb-2">Sort By</label>
                    <div className="flex items-center gap-2">
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Select value={sortBy} onValueChange={(value: SortOption) => setSortBy(value)}>
                              <SelectTrigger>
                                <SelectValue placeholder="Sort by" />
                              </SelectTrigger>
                              <SelectContent>
                                {Object.entries(SORT_DESCRIPTIONS).map(([key, description]) => (
                                  <SelectItem key={key} value={key}>
                                    <div className="flex items-center gap-2">
                                      {key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}
                                    </div>
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </TooltipTrigger>
                          <TooltipContent side="right" className="max-w-[300px] z-[100]">
                            <p>{SORT_DESCRIPTIONS[sortBy]}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                      
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => setSortDirection(prev => prev === 'desc' ? 'asc' : 'desc')}
                        className="ml-2"
                        aria-label={sortDirection === 'desc' ? 'Sort descending' : 'Sort ascending'}
                      >
                        {sortDirection === 'desc' ? <SortDesc className="h-4 w-4" /> : <SortAsc className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg font-medium">Fee Distribution</CardTitle>
                </CardHeader>
                <CardContent className="py-2">
                  <FeeDistributionChart data={generateDistributionData(filteredProtocols)} />
                </CardContent>
              </Card>
            </div>
            
            <div className="md:w-3/4">
              <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
                <CardHeader className="border-b border-zinc-200 dark:border-zinc-800">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-xl font-medium">Protocol Fee Leaderboard</CardTitle>
                    <div className="text-sm text-zinc-500 dark:text-zinc-400">
                      {timeFrame.charAt(0).toUpperCase() + timeFrame.slice(1)} Metrics
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-0">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b border-zinc-200 dark:border-zinc-800">
                          <th className="text-left py-3 px-4 font-medium">#</th>
                          <th className="text-left py-3 px-4 font-medium">Protocol</th>
                          <th className="text-left py-3 px-4 font-medium">Category</th>
                          <th className="text-right py-3 px-4 font-medium">Fees</th>
                          <th className="text-right py-3 px-4 font-medium">Revenue</th>
                          <th className="text-right py-3 px-4 font-medium">Fee Ratio</th>
                          <th className="text-left py-3 px-4 font-medium">Chains</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filteredProtocols.map((protocol, index) => {
                          const fees = getFeeValue(protocol, timeFrame);
                          const revenue = getRevenueValue(protocol, timeFrame);
                          const ratio = (revenue / fees * 100).toFixed(1);
                          
                          return (
                            <tr 
                              key={protocol.id} 
                              className="border-b border-zinc-200 dark:border-zinc-800 hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors"
                            >
                              <td className="py-3 px-4">{index + 1}</td>
                              <td className="py-3 px-4">
                                <div className="flex items-center gap-3">
                                  <ProtocolLogo
                                    src={protocol.logo}
                                    alt={protocol.name}
                                    className="w-6 h-6"
                                  />
                                  <span className="font-medium">{protocol.name}</span>
                                </div>
                              </td>
                              <td className="py-3 px-4 text-zinc-600 dark:text-zinc-400">{protocol.category}</td>
                              <td className="py-3 px-4 text-right font-medium">{formatValue(fees)}</td>
                              <td className="py-3 px-4 text-right font-medium">{formatValue(revenue)}</td>
                              <td className="py-3 px-4 text-right font-medium">{ratio}%</td>
                              <td className="py-3 px-4">
                                <div className="flex flex-wrap gap-1 max-w-[200px]">
                                  {protocol.chains.slice(0, 3).map(chain => (
                                    <span 
                                      key={chain} 
                                      className="inline-block px-2 py-1 text-xs rounded-full bg-zinc-200 dark:bg-zinc-800 text-zinc-800 dark:text-zinc-200"
                                    >
                                      {chain}
                                    </span>
                                  ))}
                                  {protocol.chains.length > 3 && (
                                    <TooltipProvider>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <span className="inline-block px-2 py-1 text-xs rounded-full bg-zinc-200 dark:bg-zinc-800 text-zinc-800 dark:text-zinc-200 cursor-help">
                                            +{protocol.chains.length - 3}
                                          </span>
                                        </TooltipTrigger>
                                        <TooltipContent>
                                          <div className="flex flex-col gap-1">
                                            {protocol.chains.slice(3).map(chain => (
                                              <span key={chain}>{chain}</span>
                                            ))}
                                          </div>
                                        </TooltipContent>
                                      </Tooltip>
                                    </TooltipProvider>
                                  )}
                                </div>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                  
                  {filteredProtocols.length === 0 && (
                    <div className="text-center py-8 text-zinc-500 dark:text-zinc-400">
                      No protocols found matching your search criteria.
                    </div>
                  )}
                </CardContent>
              </Card>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg font-medium">Top Protocols by Fee Revenue</CardTitle>
                  </CardHeader>
                  <CardContent className="py-2">
                    <TopProtocolsChart data={generateTopProtocolsData(filteredProtocols)} />
                  </CardContent>
                </Card>
                
                <Card className="bg-white dark:bg-zinc-900 border-zinc-200 dark:border-zinc-800">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg font-medium">Fee Trends Over Time</CardTitle>
                  </CardHeader>
                  <CardContent className="py-2">
                    <FeeTrendsChart data={generateTrendData(filteredProtocols)} />
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
} 